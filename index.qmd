---
title: BrainGlobe architecture
subtitle: Plans and ongoing work 
author: Alessandro Felder
execute: 
  enabled: true
format:
    revealjs:
        theme: [default, niu-dark.scss]
        logo: img/logo_niu_dark.png
        footer: "BrainGlobe architecture | 2023-10-11"
        slide-number: c
        menu:
            numbers: true
        chalkboard: true
        scrollable: true
        preview-links: false
        view-distance: 10
        mobile-view-distance: 10
        auto-animate: true
        auto-play-media: true
        code-overflow: wrap
        highlight-style: atom-one
        mermaid: 
          theme: neutral
          fontFamily: arial
          curve: linear
    html:
        theme: [default, niu-dark.scss]
        logo: img/logo_niu_dark.png
        date: "2023-07-05"
        toc: true
        code-overflow: scroll
        highlight-style: atom-one
        mermaid: 
          theme: neutral
          fontFamily: arial
          curve: linear
          margin-left: 0
        embed-resources: true
        page-layout: full
my-custom-stuff:
   my-reuseable-variable: "I can use this wherever I want in the markdown, and change it in only once place :)"
---

## Aims of the BrainGlobe Initiative {.smaller}

We have three aims:

* Develop specialist software for specific analysis and visualisation needs, such as cellfinder and brainrender.
* Develop core tools to facilitate others to build interoperable tools in Python, e.g., the BrainGlobe Atlas API.
* Build a community of neuroscientists and developers to share knowledge, build software and engage with the scientific, and open-source community (e.g., by organising hackathons).

## More quotes from the current CZI grant {.smaller}

> ... to establish a critical mass of scientists and programmers that can work together to develop open-source, interoperable and easy to use tools for computational neuroanatomy ...

* To enable use of BGI tools across neuroscience by supporting all available high-quality neuroanatomical
atlases
* To reduce barriers of entry and make sure BGI tools are accessible to all
* To ensure BGI tools and atlases can be incorporated into varied workflows to leverage the open-source
image analysis community

## Subprojects from the current CZI grant {.smaller}

* The BrainGlobe Atlas napari layer group type as a reusable, graphical instantiation of the BrainGlobe Atlas Python class. (Alessandro)
* An intuitive neuroanatomical visualisation plugin for napari based on the BrainGlobe tool, brainrender (https://github.com/brainglobe/brainrender). (Alessandro)
* General purpose napari functionality to analyse features within, and between layers, building upon existing functionality within BrainGlobe tools (?)
* New plugins to bring existing state of the art registration algorithms to napari, and ensure compatibility of the BrainGlobe Atlas layer group with existing plugins. (Igor)
* A curated, catalogued and expandable set of neuroanatomical data with manual annotations. (Viktor)

## Aim for today

* update the team on what is happening around BrainGlobe from a developer perspective
* get feedback/build understanding of BrainGlobe architecture
* maybe form the basis of developer docs for BrainGlobe?


## What is Software Architecture?

> "the shared understanding that the expert developers have of the system design."
>
> "the decisions you wish you could get right early in a project."
>
>     - Ralph Johnson paraphrased by Martin Fowler

## Requirements gathering {.smaller}

> ... to establish a critical mass of scientists and
programmers that can work together to develop open-source, interoperable and easy to use tools for
computational neuroanatomy ...
> - ...
> - make sure BGI tools are accessible to all
> - ...

## Good user experience (UX)

* understandable, useable results
* easy-to-install
* reasonable performance on "student laptop"
* accessible

## Good contributor experience (CX)
* easy to contribute
* clear expectations
* reliable infrastructure

## Low-hanging fruit

Things that are good for users *and* good for contributors.

# Good user experience

## easy-to-install

Will Graham has developed `brainglobe-meta`

``` {.bash}
pip install brainglobe
```
and (soon)
``` {.bash}
conda install -c conda-forge brainglobe
```

## reasonable performance on "student laptop"

Sofia Minano is developing benchmarkable and configurable `brainglobe-workflows`
* default to small test data (same as we use on remote GH actions)
* can set parameters to run on local GH actions runner

## accessible, easy-to-use

* Everything should have a well-documented Python API 
* Everything should be achievable with a BrainGlobe napari plugin.

## Understandable, useable results

* Tutorial centred documentation
* Deep thinking about API/GUI wording
* User research

# Good contributor experience

## easy to contribute, clear expectations {.smaller}

> The key to working with a large codebase is not having to read the entire codebase to make a change. To enable a programmer to quickly find the code ~~he is~~ [edit: they are] looking for, code should be organized, and the organization apparent. That is, each logical unit in the code, from the executable, the library, the namespace, down to the individual class should have a clearly apparent responsibility.

* Developer documentation
* Consistency across repositories
    * now easier thanks to BG meta-package
* open and planned developer meetings


## reliable infrastructure

* Benchmarks to act as end-to-end smoke tests.
* Consistify tooling across repos
* Simplify repository structure
    * now easier thanks to BG meta-package
    * fewer repos, each with clearer responsibilities

# Consistently "good" (proposal)

## Package/repo restructure

:::: {.columns}

::: {.column width="50%" style="font-size: 0.5em;"}
![Graphic by Will Graham](img/brainGlobe-current-dependencies.svg)
:::

::: {.column width="50%" style="font-size: 0.5em;"}
![Sketch by Will Graham](img/brainglobe-future-sketch.jpg)
:::

::::

timeline for restructure: mid-November 

## Package/repo restructure

* keep napari plugins with core code (optional install)
* move CLI to workflows? Example workflows elsewhere (tutorial notebooks)?

![future repo architecture?](img/top-level-future-architecture.svg)

## Low-level architecture (napari widgets)

* modularity and single responsibility: 
    * separate napari code from Qt Code
    * Qt Model/View framework for `brainrender-napari`
    * makes testing easier and quicker

* Consistently use `qtpy` rather than `magicgui` for more fine-grained control

## Low-level architecture (brainrender-napari)

* demo

## Future plans/ongoing work

* Can we make it even more modular and re-use UI code in Textual?
* atlas generation code refactor
* finish up version manager widget
* resurrect brainrender
* BG-napari on local HPC via Open-on-Demand
* lots of simultaneous work-in-progress

## my deepest worries

* progress on consistency slow
* watch out for YAGNI (You ain't gonna need it)
* breaking change in November
* overthinking it
* not limiting work-in-progress

